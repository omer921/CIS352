GHCi, version 7.8.3: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> :load "/Users/OWinrauke/Dropbox/CIS352/hw6/LCbs.hs"
[1 of 5] Compiling State            ( State.hs, interpreted )
[2 of 5] Compiling LC               ( LC.hs, interpreted )
[3 of 5] Compiling LCParser         ( LCParser.hs, interpreted )
[4 of 5] Compiling LCCEK            ( LCCEK.hs, interpreted )
[5 of 5] Compiling Main             ( /Users/OWinrauke/Dropbox/CIS352/hw6/LCbs.hs, interpreted )
Ok, modules loaded: State, LC, LCParser, LCCEK, Main.
*Main> quickCheck ss_prop

<interactive>:3:12:
    Not in scope: ‘ss_prop’
    Perhaps you meant ‘bs_prop’ (line 65)
*Main> :load "/Users/OWinrauke/Dropbox/CIS352/hw6/LCss.hs"
[1 of 5] Compiling State            ( State.hs, interpreted )
[2 of 5] Compiling LC               ( LC.hs, interpreted )
[3 of 5] Compiling LCParser         ( LCParser.hs, interpreted )
[4 of 5] Compiling LCCEK            ( LCCEK.hs, interpreted )
[5 of 5] Compiling Main             ( /Users/OWinrauke/Dropbox/CIS352/hw6/LCss.hs, interpreted )
Ok, modules loaded: State, LC, LCParser, LCCEK, Main.
*Main> quickCheck ss_prop
Loading package array-0.5.0.0 ... linking ... done.
Loading package deepseq-1.3.0.2 ... linking ... done.
Loading package old-locale-1.0.0.6 ... linking ... done.
Loading package time-1.4.2 ... linking ... done.
Loading package random-1.0.1.1 ... linking ... done.
Loading package bytestring-0.10.4.0 ... linking ... done.
Loading package transformers-0.3.0.0 ... linking ... done.
Loading package mtl-2.1.3.1 ... linking ... done.
Loading package text-1.1.0.0 ... linking ... done.
Loading package parsec-3.1.5 ... linking ... done.
Loading package containers-0.5.5.1 ... linking ... done.
Loading package pretty-1.1.1.1 ... linking ... done.
Loading package template-haskell ... linking ... done.
Loading package QuickCheck-2.6 ... linking ... done.
*Main> stepRun fact state4
Step: 0
 C { x1 := 1; x2 := val(x0); while (val(x2)>0) do { x1 := (val(x1)*val(x2
 s[0]=4   s[1]=0   s[2]=0   s[3]=0   s[4]=0     <tap return>
Step: 1
 C x1 := 1
 s[0]=4   s[1]=0   s[2]=0   s[3]=0   s[4]=0     <tap return>
Step: 2
 C skip
 s[0]=4   s[1]=24   s[2]=0   s[3]=0   s[4]=0     <tap return>
*Main> 
