GHCi, version 7.8.3: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> :load "/Users/OWinrauke/Desktop/codes/LCvm.hs"
[1 of 2] Compiling LC2              ( LC2.hs, interpreted )
[2 of 2] Compiling LCvm             ( /Users/OWinrauke/Desktop/codes/LCvm.hs, interpreted )
Ok, modules loaded: LCvm, LC2.
*LCvm> incTest

<interactive>:3:1:
    No instance for (Show (Wrd -> IO ())) arising from a use of ‘print’
    In a stmt of an interactive GHCi command: print it
*LCvm> incTest 221
Loading package array-0.5.0.0 ... linking ... done.
Loading package deepseq-1.3.0.2 ... linking ... done.
Loading package old-locale-1.0.0.6 ... linking ... done.
Loading package time-1.4.2 ... linking ... done.
Loading package random-1.0.1.1 ... linking ... done.
Loading package containers-0.5.5.1 ... linking ... done.
Loading package pretty-1.1.1.1 ... linking ... done.
Loading package template-haskell ... linking ... done.
Loading package QuickCheck-2.6 ... linking ... done.
Step 1
   0: Push 221
Stack:     []
Regs(!=0): 


Step 2
   2: Inc
Stack:     [221]
Regs(!=0): 


Step 3
   3: Halt
Stack:     [222]
Regs(!=0): 


*LCvm> 
*LCvm> 
*LCvm> 
*LCvm> decTest 223
Step 1
   0: Push 223
Stack:     []
Regs(!=0): 


Step 2
   2: Dec
Stack:     [223]
Regs(!=0): 


Step 3
   3: Halt
Stack:     [222]
Regs(!=0): 


*LCvm> 
*LCvm> :t dupTest
dupTest :: [Wrd] -> IO ()
*LCvm> :t dupTest "hello"

<interactive>:1:9:
    Couldn't match type ‘Char’ with ‘Word8’
    Expected type: [Wrd]
      Actual type: [Char]
    In the first argument of ‘dupTest’, namely ‘"hello"’
    In the expression: dupTest "hello"
*LCvm> dupTest [10,20,30]
Step 1
   0: Push 10
Stack:     []
Regs(!=0): 


Step 2
   2: Push 20
Stack:     [10]
Regs(!=0): 


Step 3
   4: Push 30
Stack:     [10,20]
Regs(!=0): 


Step 4
   6: Dup
Stack:     [10,20,30]
Regs(!=0): 


Step 5
   7: Halt
Stack:     [10,20,30,30]
Regs(!=0): 


*LCvm> 
*LCvm> 
*LCvm> 
*LCvm> stepRun fact4'
Step 1
   0: Push 4
Stack:     []
Regs(!=0): 


Step 2
   2: Store 0
Stack:     [4]
Regs(!=0): 


Step 3
   4: Pop
Stack:     [4]
Regs(!=0): x0=4 


Step 4
   5: Call 8
Stack:     []
Regs(!=0): x0=4 


Step 5
   8: Fetch 0
Stack:     [7]
Regs(!=0): x0=4 


Step 6
  10: Jnz 7
Stack:     [7,4]
Regs(!=0): x0=4 


Step 7
  18: Fetch 0
Stack:     [7]
Regs(!=0): x0=4 


Step 8
  20: Dup
Stack:     [7,4]
Regs(!=0): x0=4 


Step 9
  21: Push 1
Stack:     [7,4,4]
Regs(!=0): x0=4 


Step 10
  23: Isub
Stack:     [7,4,4,1]
Regs(!=0): x0=4 


Step 11
  24: Store 0
Stack:     [7,4,3]
Regs(!=0): x0=4 


Step 12
  26: Pop
Stack:     [7,4,3]
Regs(!=0): x0=3 


Step 13
  27: Call 8
Stack:     [7,4]
Regs(!=0): x0=3 


Step 14
   8: Fetch 0
Stack:     [7,4,29]
Regs(!=0): x0=3 


Step 15
  10: Jnz 7
Stack:     [7,4,29,3]
Regs(!=0): x0=3 


Step 16
  18: Fetch 0
Stack:     [7,4,29]
Regs(!=0): x0=3 


Step 17
  20: Dup
Stack:     [7,4,29,3]
Regs(!=0): x0=3 


Step 18
  21: Push 1
Stack:     [7,4,29,3,3]
Regs(!=0): x0=3 


Step 19
  23: Isub
Stack:     [7,4,29,3,3,1]
Regs(!=0): x0=3 


Step 20
  24: Store 0
Stack:     [7,4,29,3,2]
Regs(!=0): x0=3 


Step 21
  26: Pop
Stack:     [7,4,29,3,2]
Regs(!=0): x0=2 


Step 22
  27: Call 8
Stack:     [7,4,29,3]
Regs(!=0): x0=2 


Step 23
   8: Fetch 0
Stack:     [7,4,29,3,29]
Regs(!=0): x0=2 


Step 24
  10: Jnz 7
Stack:     [7,4,29,3,29,2]
Regs(!=0): x0=2 


Step 25
  18: Fetch 0
Stack:     [7,4,29,3,29]
Regs(!=0): x0=2 


Step 26
  20: Dup
Stack:     [7,4,29,3,29,2]
Regs(!=0): x0=2 


Step 27
  21: Push 1
Stack:     [7,4,29,3,29,2,2]
Regs(!=0): x0=2 


Step 28
  23: Isub
Stack:     [7,4,29,3,29,2,2,1]
Regs(!=0): x0=2 


Step 29
  24: Store 0
Stack:     [7,4,29,3,29,2,1]
Regs(!=0): x0=2 


Step 30
  26: Pop
Stack:     [7,4,29,3,29,2,1]
Regs(!=0): x0=1 


Step 31
  27: Call 8
Stack:     [7,4,29,3,29,2]
Regs(!=0): x0=1 


Step 32
   8: Fetch 0
Stack:     [7,4,29,3,29,2,29]
Regs(!=0): x0=1 


Step 33
  10: Jnz 7
Stack:     [7,4,29,3,29,2,29,1]
Regs(!=0): x0=1 


Step 34
  18: Fetch 0
Stack:     [7,4,29,3,29,2,29]
Regs(!=0): x0=1 


Step 35
  20: Dup
Stack:     [7,4,29,3,29,2,29,1]
Regs(!=0): x0=1 


Step 36
  21: Push 1
Stack:     [7,4,29,3,29,2,29,1,1]
Regs(!=0): x0=1 


Step 37
  23: Isub
Stack:     [7,4,29,3,29,2,29,1,1,1]
Regs(!=0): x0=1 


Step 38
  24: Store 0
Stack:     [7,4,29,3,29,2,29,1,0]
Regs(!=0): x0=1 


Step 39
  26: Pop
Stack:     [7,4,29,3,29,2,29,1,0]
Regs(!=0): 


Step 40
  27: Call 8
Stack:     [7,4,29,3,29,2,29,1]
Regs(!=0): 


Step 41
   8: Fetch 0
Stack:     [7,4,29,3,29,2,29,1,29]
Regs(!=0): 


Step 42
  10: Jnz 7
Stack:     [7,4,29,3,29,2,29,1,29,0]
Regs(!=0): 


Step 43
  12: Push 1
Stack:     [7,4,29,3,29,2,29,1,29]
Regs(!=0): 


Step 44
  14: Store 1
Stack:     [7,4,29,3,29,2,29,1,29,1]
Regs(!=0): 


Step 45
  16: Pop
Stack:     [7,4,29,3,29,2,29,1,29,1]
Regs(!=0): x1=1 


Step 46
  17: Ret
Stack:     [7,4,29,3,29,2,29,1,29]
Regs(!=0): x1=1 


Step 47
  29: Fetch 1
Stack:     [7,4,29,3,29,2,29,1]
Regs(!=0): x1=1 


Step 48
  31: Imult
Stack:     [7,4,29,3,29,2,29,1,1]
Regs(!=0): x1=1 


Step 49
  32: Store 1
Stack:     [7,4,29,3,29,2,29,1]
Regs(!=0): x1=1 


Step 50
  34: Pop
Stack:     [7,4,29,3,29,2,29,1]
Regs(!=0): x1=1 


Step 51
  35: Ret
Stack:     [7,4,29,3,29,2,29]
Regs(!=0): x1=1 


Step 52
  29: Fetch 1
Stack:     [7,4,29,3,29,2]
Regs(!=0): x1=1 


Step 53
  31: Imult
Stack:     [7,4,29,3,29,2,1]
Regs(!=0): x1=1 


Step 54
  32: Store 1
Stack:     [7,4,29,3,29,2]
Regs(!=0): x1=1 


Step 55
  34: Pop
Stack:     [7,4,29,3,29,2]
Regs(!=0): x1=2 


Step 56
  35: Ret
Stack:     [7,4,29,3,29]
Regs(!=0): x1=2 


Step 57
  29: Fetch 1
Stack:     [7,4,29,3]
Regs(!=0): x1=2 


Step 58
  31: Imult
Stack:     [7,4,29,3,2]
Regs(!=0): x1=2 


Step 59
  32: Store 1
Stack:     [7,4,29,6]
Regs(!=0): x1=2 


Step 60
  34: Pop
Stack:     [7,4,29,6]
Regs(!=0): x1=6 


Step 61
  35: Ret
Stack:     [7,4,29]
Regs(!=0): x1=6 


Step 62
  29: Fetch 1
Stack:     [7,4]
Regs(!=0): x1=6 


Step 63
  31: Imult
Stack:     [7,4,6]
Regs(!=0): x1=6 


Step 64
  32: Store 1
Stack:     [7,24]
Regs(!=0): x1=6 


Step 65
  34: Pop
Stack:     [7,24]
Regs(!=0): x1=24 


Step 66
  35: Ret
Stack:     [7]
Regs(!=0): x1=24 


Step 67
   7: Halt
Stack:     []
Regs(!=0): x1=24 


*LCvm> 
*LCvm> 
*LCvm> 
*LCvm> notTest1

<interactive>:23:1: Not in scope: ‘notTest1’
*LCvm> notTest1
Loading package bytestring-0.10.4.0 ... linking ... done.
Loading package transformers-0.3.0.0 ... linking ... done.
Loading package mtl-2.1.3.1 ... linking ... done.
Loading package text-1.1.0.0 ... linking ... done.
Loading package parsec-3.1.5 ... linking ... done.
The program:
	if ( not tt) then x1 := 2 else x1 := 1
compiles to
   0: Push 1
   2: Push 1
   4: Isub
   5: Jz 8
   7: Push 2
   9: Store 1
  11: Pop
  12: Jmp 6
  14: Push 1
  16: Store 1
  18: Pop
  19: Halt
Here is the run:
Step 1
   0: Push 1
Stack:     []
Regs(!=0): 


Step 2
   2: Push 1
Stack:     [1]
Regs(!=0): 


Step 3
   4: Isub
Stack:     [1,1]
Regs(!=0): 


Step 4
   5: Jz 8
Stack:     [0]
Regs(!=0): 


Step 5
  14: Push 1
Stack:     []
Regs(!=0): 


Step 6
  16: Store 1
Stack:     [1]
Regs(!=0): 


Step 7
  18: Pop
Stack:     [1]
Regs(!=0): x1=1 


Step 8
  19: Halt
Stack:     []
Regs(!=0): x1=1 


*Main> 
*Main> 
*Main> 
*Main> notTest2
The program:
	if ( not ff) then x1 := 2 else x1 := 1
compiles to
   0: Push 1
   2: Push 0
   4: Isub
   5: Jz 8
   7: Push 2
   9: Store 1
  11: Pop
  12: Jmp 6
  14: Push 1
  16: Store 1
  18: Pop
  19: Halt
Here is the run:
Step 1
   0: Push 1
Stack:     []
Regs(!=0): 


Step 2
   2: Push 0
Stack:     [1]
Regs(!=0): 


Step 3
   4: Isub
Stack:     [1,0]
Regs(!=0): 


Step 4
   5: Jz 8
Stack:     [1]
Regs(!=0): 


Step 5
   7: Push 2
Stack:     []
Regs(!=0): 


Step 6
   9: Store 1
Stack:     [2]
Regs(!=0): 


Step 7
  11: Pop
Stack:     [2]
Regs(!=0): x1=2 


Step 8
  12: Jmp 6
Stack:     []
Regs(!=0): x1=2 


Step 9
  19: Halt
Stack:     []
Regs(!=0): x1=2 


*Main> 
*Main> 